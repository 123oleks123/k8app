exporters:
  logging:
    loglevel: info
    sampling_initial: 10
    sampling_thereafter: 50
  prometheus:
    endpoint: 0.0.0.0:9000
    metric_expiration: 60m
    resource_to_telemetry_conversion:
      enabled: true
    send_timestamps: true

receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'agent'
          scrape_interval: 5s
          static_configs:
            - targets:
                - 0.0.0.0:8888
        # search pods containing prometheus.io/scrape annotation
        #
        # example:
        # prometheus.io/path: /metrics
        # prometheus.io/port: "7777"
        # prometheus.io/scrape: "true"
        # prometheus.io/param: "xxx=yyy"
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
            - role: pod
              selectors:
                - role: pod
                  # only scrape data from pods running on the same node as collector
                  field: "spec.nodeName=$NODE_NAME"
          honor_labels: false
          relabel_configs:
            - action: keep
              regex: true
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $$1:$$2
              source_labels:
                - __address__
                - __meta_kubernetes_pod_annotation_prometheus_io_port
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            #            - action: labelmap
            #              regex: __meta_kubernetes_pod_label_(.+)
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
                - __meta_kubernetes_pod_phase

  filelog:
    include:
      - /var/log/pods/*/*/*.log
    exclude:
      # Exclude logs from all containers named otel-collector
      - /var/log/pods/*/otel-collector/*.log
    include_file_name: false
    include_file_path: true
    operators:
      - id: get-format
        routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
        type: router
      - id: parser-crio
        output: extract_metadata_from_filepath
        regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
        timestamp:
          layout: "2006-01-02T15:04:05.000000000-07:00"
          layout_type: gotime
          parse_from: attributes.time
        type: regex_parser
      - id: parser-containerd
        output: extract_metadata_from_filepath
        regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
        timestamp:
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          parse_from: attributes.time
        type: regex_parser
      - id: parser-docker
        output: extract_metadata_from_filepath
        timestamp:
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          parse_from: attributes.time
        type: json_parser
      - from: attributes.log
        to: body
        type: move
      - id: extract_metadata_from_filepath
        parse_from: attributes["log.file.path"]
        regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
        type: regex_parser
      - from: attributes.stream
        to: attributes["log.iostream"]
        type: move
      - from: attributes.container_name
        to: resource["k8s.container.name"]
        type: move
      - from: attributes.namespace
        to: resource["k8s.namespace.name"]
        type: move
      - from: attributes.pod_name
        to: resource["k8s.pod.name"]
        type: move
      - from: attributes.restart_count
        to: resource["k8s.container.restart_count"]
        type: move
      - from: attributes.uid
        to: resource["k8s.pod.uid"]
        type: move
    start_at: beginning

  otlp:
    protocols:
      grpc: { }
      http: { }

processors:
  batch:
    send_batch_max_size: 1500
    send_batch_size: 100
    timeout: 15s
  k8sattributes:
    auth_type: kubeConfig
    extract:
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        - k8s.cluster.name
        - k8s.namespace.name
        - k8s.node.name
        - k8s.pod.start_time
    passthrough: false
    pod_association:
      - sources:
          - from: resource_attribute
            name: ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: host.name
      - sources:
          - from: connection
            name: ip
  memory_limiter:
    check_interval: 2s
    limit_mib: 1000
    spike_limit_mib: 200
  resource:
    attributes:
      - action: upsert
        key: namespace
        value: 'demo'
      - action: upsert
        key: license
        value: 'global'
      - action: upsert
        key: deployment_environment
        value: 'test'
      - action: delete
        key: http.scheme
      - action: delete
        key: net.host.port
      - action: upsert
        from_attribute: host.name
        key: host
  resource/tempo:
    attributes:
      - action: insert
        from_attribute: service
        key: service.name
      - action: delete
        key: service
  transform:
    metric_statements:
      - context: resource
        statements:
          - replace_all_patterns(attributes, "key", "k8s.(statefulset|deployment|daemonset).name", "resource")
          - replace_all_patterns(attributes, "key", "service.name", "job")
          - delete_key(attributes, "k8s.pod.uid")
          - delete_key(attributes, "k8s.container.restart_count")
          - replace_all_patterns(attributes, "key", "k8s.node.name", "nodename")
          - replace_all_patterns(attributes, "key", "k8s.namespace.name", "k8s_namespace")
          - replace_all_patterns(attributes, "key", "k8s.pod.name", "instance")
          - replace_all_patterns(attributes, "key", "k8s.container.name", "k8s_container")
          #- replace_all_patterns(attributes, "key", "\\.", "_")
    log_statements:
      - context: resource
        statements:
          - delete_key(attributes, "k8s.pod.uid")
          - delete_key(attributes, "k8s.container.restart_count")
          - replace_all_patterns(attributes, "key", "k8s.namespace.name", "k8s_namespace")
          - replace_all_patterns(attributes, "key", "k8s.pod.name", "instance")
          - replace_all_patterns(attributes, "key", "k8s.container.name", "k8s_container")
          - replace_all_patterns(attributes, "key", "\\.", "_")
      - context: log
        statements:
          - delete_key(attributes, "logtag")
          - delete_key(attributes, "log.file.path")
          - replace_all_patterns(attributes, "key", "\\.", "_")
extensions:
  health_check: {  }
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions:
    - pprof
    - zpages
    - health_check
  pipelines:
    logs:
      exporters:
        - logging
      processors:
        - resource
        - transform
        - memory_limiter
        - batch
      receivers:
        - otlp
        - filelog
    metrics:
      exporters:
        - logging
        - prometheus
      processors:
        - resource
        - transform
        - memory_limiter
        - batch
      receivers:
        - otlp
        - prometheus
    traces:
      exporters:
        - logging
      processors:
        - memory_limiter
        - batch
        - resource
        - resource/tempo
      receivers:
        - otlp
