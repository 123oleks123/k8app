# Default values for agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
info:
  license: PLZ_CHANGE
  namespace: PLZ_CHANGE
  deployment_environment: PLZ_CHANGE

gateway:
  addr: otel.time2go.tech:4317

replicaCount: 1

service:
  type: ClusterIP
  ports:
    - port: 4317
      name: otelgrpc
    - port: 4318
      name: otelhttp
#    - port: 24224
#      name: fluentforward

rbac:
  create: true

podSecurityPolicy:
  enabled: false

image:
  repository: otel/opentelemetry-collector-contrib
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.67.0"

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "collector"
  # Annotations to add to the service account
  annotations: { }

podAnnotations: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 0.5Gi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


nodeSelector: { }

tolerations: [ ]

affinity: { }

structuredConfig: { }

# required AWS SSM parameter store certificates
certs:
  "ca.crt": "ca.crt"
  "client.crt": "client.crt"
  "client.key": "client.key"

config:
  receivers:
    otlp:
      protocols:
        http:
        grpc:
    fluentforward:
      endpoint: 0.0.0.0:24224
    prometheus: # required only 1 replica
      config:
        scrape_configs:
          - job_name: 'agent'
            scrape_interval: 15s
            static_configs:
              - targets: [ '0.0.0.0:8888' ]
          - job_name: 'kubernetes-cadvisor'
            scheme: https
            scrape_interval: 1m
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              #      - action: labelmap
              #        regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc.cluster.local:443
              - source_labels: [ __meta_kubernetes_node_name ]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor
          - job_name: 'kubernetes-kubelet'
            scrape_interval: 1m
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              #      - action: labelmap
              #        regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc.cluster.local:443
              - source_labels: [ __meta_kubernetes_node_name ]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$$1/proxy/metrics
          - job_name: 'kubernetes-kube-state'
            scrape_interval: 1m
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              #      - action: labelmap
              #        regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [ __meta_kubernetes_namespace ]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [ __meta_kubernetes_pod_name ]
                action: replace
                target_label: kubernetes_pod_name
              - source_labels: [ __meta_kubernetes_pod_label_grafanak8sapp ]
                regex: .*true.*
                action: keep
              - source_labels: [ '__meta_kubernetes_pod_label_daemon', '__meta_kubernetes_pod_node_name' ]
                regex: 'node-exporter;(.*)'
                action: replace
                target_label: nodename
        #  - job_name: kubernetes-apiservers
        #    kubernetes_sd_configs:
        #      - role: endpoints
        #    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        #    relabel_configs:
        #      - action: keep
        #        regex: default;kubernetes;https
        #        source_labels:
        #          - __meta_kubernetes_namespace
        #          - __meta_kubernetes_service_name
        #          - __meta_kubernetes_endpoint_port_name
        #    scheme: https
        #    tls_config:
        #      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        #      insecure_skip_verify: true
        #  - job_name: kubernetes-service-endpoints
        #    kubernetes_sd_configs:
        #      - role: endpoints
        #    honor_labels: false
        #    relabel_configs:
        #      - action: keep
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_scrape
        #      - action: drop
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
        #      - action: replace
        #        regex: (https?)
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_scheme
        #        target_label: __scheme__
        #      - action: replace
        #        regex: (.+)
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_path
        #        target_label: __metrics_path__
        #      - action: replace
        #        regex: (.+?)(?::\d+)?;(\d+)
        #        replacement: $1:$2
        #        source_labels:
        #          - __address__
        #          - __meta_kubernetes_service_annotation_prometheus_io_port
        #        target_label: __address__
        #      - action: labelmap
        #        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        #        replacement: __param_$1
        #      - action: labelmap
        #        regex: __meta_kubernetes_service_label_(.+)
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_namespace
        #        target_label: namespace
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_service_name
        #        target_label: service
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_pod_node_name
        #        target_label: node
        #  - job_name: kubernetes-service-endpoints-slow
        #    honor_labels: false
        #    kubernetes_sd_configs:
        #      - role: endpoints
        #    relabel_configs:
        #      - action: keep
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
        #      - action: replace
        #        regex: (https?)
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_scheme
        #        target_label: __scheme__
        #      - action: replace
        #        regex: (.+)
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_path
        #        target_label: __metrics_path__
        #      - action: replace
        #        regex: (.+?)(?::\d+)?;(\d+)
        #        replacement: $1:$2
        #        source_labels:
        #          - __address__
        #          - __meta_kubernetes_service_annotation_prometheus_io_port
        #        target_label: __address__
        #      - action: labelmap
        #        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        #        replacement: __param_$1
        #      - action: labelmap
        #        regex: __meta_kubernetes_service_label_(.+)
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_namespace
        #        target_label: namespace
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_service_name
        #        target_label: service
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_pod_node_name
        #        target_label: node
        #    scrape_interval: 5m
        #    scrape_timeout: 30s
        #  - job_name: kubernetes-services
        #    kubernetes_sd_configs:
        #      - role: service
        #    honor_labels: false
        #    metrics_path: /probe
        #    params:
        #      module:
        #        - http_2xx
        #    relabel_configs:
        #      - action: keep
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_service_annotation_prometheus_io_probe
        #      - source_labels:
        #          - __address__
        #        target_label: __param_target
        #      - replacement: blackbox
        #        target_label: __address__
        #      - source_labels:
        #          - __param_target
        #        target_label: instance
        #      - action: labelmap
        #        regex: __meta_kubernetes_service_label_(.+)
        #      - source_labels:
        #          - __meta_kubernetes_namespace
        #        target_label: namespace
        #      - source_labels:
        #          - __meta_kubernetes_service_name
        #        target_label: service
        #  - job_name: kubernetes-pods
        #    kubernetes_sd_configs:
        #      - role: pod
        #    honor_labels: false
        #    relabel_configs:
        #      - action: keep
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_scrape
        #      - action: drop
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
        #      - action: replace
        #        regex: (https?)
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        #        target_label: __scheme__
        #      - action: replace
        #        regex: (.+)
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_path
        #        target_label: __metrics_path__
        #      - action: replace
        #        regex: (.+?)(?::\d+)?;(\d+)
        #        replacement: $1:$2
        #        source_labels:
        #          - __address__
        #          - __meta_kubernetes_pod_annotation_prometheus_io_port
        #        target_label: __address__
        #      - action: labelmap
        #        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        #        replacement: __param_$1
        #      - action: labelmap
        #        regex: __meta_kubernetes_pod_label_(.+)
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_namespace
        #        target_label: namespace
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_pod_name
        #        target_label: pod
        #      - action: drop
        #        regex: Pending|Succeeded|Failed|Completed
        #        source_labels:
        #          - __meta_kubernetes_pod_phase
        #  - job_name: kubernetes-pods-slow
        #    kubernetes_sd_configs:
        #      - role: pod
        #    honor_labels: false
        #    relabel_configs:
        #      - action: keep
        #        regex: true
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
        #      - action: replace
        #        regex: (https?)
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        #        target_label: __scheme__
        #      - action: replace
        #        regex: (.+)
        #        source_labels:
        #          - __meta_kubernetes_pod_annotation_prometheus_io_path
        #        target_label: __metrics_path__
        #      - action: replace
        #        regex: (.+?)(?::\d+)?;(\d+)
        #        replacement: $1:$2
        #        source_labels:
        #          - __address__
        #          - __meta_kubernetes_pod_annotation_prometheus_io_port
        #        target_label: __address__
        #      - action: labelmap
        #        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        #        replacement: __param_$1
        #      - action: labelmap
        #        regex: __meta_kubernetes_pod_label_(.+)
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_namespace
        #        target_label: namespace
        #      - action: replace
        #        source_labels:
        #          - __meta_kubernetes_pod_name
        #        target_label: pod
        #      - action: drop
        #        regex: Pending|Succeeded|Failed|Completed
        #        source_labels:
        #          - __meta_kubernetes_pod_phase
        #    scrape_interval: 5m
        #    scrape_timeout: 30s
    filelog:
      include:
        - /var/log/pods/*/*/*.log
      exclude:
        # Exclude logs from all containers named otel-collector
        - /var/log/pods/*/otel-collector/*.log
      start_at: beginning
      include_file_path: true
      include_file_name: false
      operators:
        # Find out which format is used by kubernetes
        - type: router
          id: get-format
          routes:
            - output: parser-docker
              expr: 'body matches "^\\{"'
            - output: parser-crio
              expr: 'body matches "^[^ Z]+ "'
            - output: parser-containerd
              expr: 'body matches "^[^ Z]+Z"'
        # Parse CRI-O format
        - type: regex_parser
          id: parser-crio
          regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout_type: gotime
            layout: '2006-01-02T15:04:05.000000000-07:00'
        # Parse CRI-Containerd format
        - type: regex_parser
          id: parser-containerd
          regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        # Parse Docker format
        - type: json_parser
          id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        - type: move
          from: attributes.log
          to: body
        # Extract metadata from file path
        - type: regex_parser
          id: extract_metadata_from_filepath
          regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
          parse_from: attributes["log.file.path"]
        # Rename attributes
        - type: move
          from: attributes.stream
          to: attributes["log.iostream"]
        - type: move
          from: attributes.container_name
          to: resource["k8s.container.name"]
        - type: move
          from: attributes.namespace
          to: resource["k8s.namespace.name"]
        - type: move
          from: attributes.pod_name
          to: resource["k8s.pod.name"]
        - type: move
          from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
        - type: move
          from: attributes.uid
          to: resource["k8s.pod.uid"]
  exporters:
    prometheus:
      endpoint: "0.0.0.0:9000"
      namespace: "{{ .Values.info.namespace }}"
      send_timestamps: true
      metric_expiration: 60m
    logging:
      loglevel: info
      sampling_initial: 10
      sampling_thereafter: 50
    otlp/global:
      endpoint: "{{ .Values.gateway.addr }}"
      compression: snappy
      tls:
        ca_file: /certs/ca.crt
        cert_file: /certs/client.crt
        key_file: /certs/client.key
  service:
    extensions: [ pprof, zpages, health_check ]
    pipelines:
      traces:
        receivers: [ otlp ]
        processors: [ memory_limiter, batch, resource, resource/tempo ]
        exporters: [ logging, otlp/global ]
      metrics:
        receivers: [ otlp, prometheus ]
        processors: [ memory_limiter, batch, resource ]
        exporters: [ logging, otlp/global, prometheus ]
      logs:
        receivers: [ fluentforward, otlp, filelog ]
        processors: [ memory_limiter, batch, k8sattributes, resource, transform ]
        exporters: [ logging, otlp/global ]
  extensions:
    health_check:
    pprof:
      endpoint: :1888
    zpages:
      endpoint: :55679
  processors:
    # k8sattributes processor to get the metadata from K8s
    k8sattributes:
      auth_type: "serviceAccount"
      passthrough: false
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.cluster.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
      # Pod association using resource attributes and connection
      pod_association:
      - sources:
          - from: resource_attribute
            name: ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: host.name
      - sources:
          - from: connection
            name: ip
    # loki not support keys with dots - so replace it
    transform:
      log_statements:
      - context: resource
        statements:
          - delete_key(attributes, "k8s.pod.uid")
          - delete_key(attributes, "k8s.container.restart_count")
          - replace_all_patterns(attributes, "key", "k8s.namespace.name", "k8s.namespace")
          - replace_all_patterns(attributes, "key", "k8s.pod.name", "k8s_instance")
          - replace_all_patterns(attributes, "key", "k8s.container.name", "k8s_container")
          - replace_all_patterns(attributes, "key", "\\.", "_")
      - context: log
        statements:
          - delete_key(attributes, "logtag")
          - delete_key(attributes, "log.file.path")
          - replace_all_patterns(attributes, "key", "\\.", "_")
    resource/tempo:
      attributes:
        - key: "service.name"
          from_attribute: "service"
          action: insert
        - key: "service"
          action: delete
    resource:
      attributes:
        - key: namespace
          value: "{{ .Values.info.namespace }}"
          action: upsert
        - key: license
          action: upsert
          value: "{{ .Values.info.license }}"
        - key: deployment_environment
          value: "{{ .Values.info.deployment_environment }}"
          action: upsert
        - key: http.scheme
          action: delete
        - key: net.host.port
          action: delete
        - key: host
          from_attribute: "host.name"
          action: upsert
    batch:
      send_batch_size: 1000
      send_batch_max_size: 3000
      timeout: 15s
    # Enabling the memory_limiter is strongly recommended for every pipeline.
    # Configuration is based on the amount of memory allocated to the collector.
    # The configuration below assumes 2GB of memory. In general, the ballast
    # should be set to 1/3 of the collector's memory, the limit should be 90% of
    # the collector's memory up to 2GB, and the spike should be 25% of the
    # collector's memory up to 2GB. In addition, the "--mem-ballast-size-mib" CLI
    # flag must be set to the same value as the "ballast_size_mib". For more
    # information, see
    # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiterprocessor/README.md
    memory_limiter:
      check_interval: 2s
      limit_mib: 1000
      spike_limit_mib: 200

  file: |
    receivers:
    {{ tpl (toYaml .Values.config.receivers) . | nindent 2 }}

    exporters:
    {{ tpl (toYaml .Values.config.exporters) . | nindent 2 }}

    processors:
    {{ tpl (toYaml .Values.config.processors) . | nindent 2 }}
    
    extensions:
    {{ tpl (toYaml .Values.config.extensions) . | nindent 2 }}
    
    service:
    {{ tpl (toYaml .Values.config.service) . | nindent 2 }}